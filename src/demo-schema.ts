/* tslint:disable */

/**
 * AUTO-GENERATED FILE @ 2019-06-27 14:26:37 - DO NOT EDIT!
 *
 * This file was automatically generated by schemats v.3.0.3
 * $ schemats generate -c postgres://username:password@localhost/ormless_demo -t appleTransactions -t authors -t books -t email_authentication -s public
 *
 */

import {
  DefaultType,
  JSONValue,
  JSONArray,
  SQLFragment,
  GenericSQLExpression,
  ColumnNames,
  ColumnValues,
  Queryable,
  UpsertAction,
} from "./db";

export type appleEnvironment = 'PROD' | 'Sandbox';
export namespace every {
  export type appleEnvironment = ['PROD', 'Sandbox'];
}

export namespace appleTransactions {
  export type Table = "appleTransactions";
  export interface Selectable {
    environment: appleEnvironment;
    originalTransactionId: string;
    accountId: number;
    latestReceiptData: string | null;
  }
  export interface Insertable {
    environment: appleEnvironment | SQLFragment;
    originalTransactionId: string | SQLFragment;
    accountId: number | SQLFragment;
    latestReceiptData?: string | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Selectable]?: Selectable[K] | SQLFragment };
  export interface UpsertReturnable extends Selectable, UpsertAction { };
  export type Column = keyof Selectable;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
  export interface OrderSpec {
    by: SQL,
    direction: 'ASC' | 'DESC',
    nulls?: 'FIRST' | 'LAST',
  }
  export interface SelectOptions {
    order?: OrderSpec[];
    limit?: number,
    offset?: number,
  }
}

export namespace authors {
  export type Table = "authors";
  export interface Selectable {
    id: number;
    name: string;
    isLiving: boolean | null;
  }
  export interface Insertable {
    id?: number | DefaultType | SQLFragment;
    name: string | SQLFragment;
    isLiving?: boolean | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Selectable]?: Selectable[K] | SQLFragment };
  export interface UpsertReturnable extends Selectable, UpsertAction { };
  export type Column = keyof Selectable;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
  export interface OrderSpec {
    by: SQL,
    direction: 'ASC' | 'DESC',
    nulls?: 'FIRST' | 'LAST',
  }
  export interface SelectOptions {
    order?: OrderSpec[];
    limit?: number,
    offset?: number,
  }
}

export namespace books {
  export type Table = "books";
  export interface Selectable {
    id: number;
    authorId: number;
    title: string | null;
    createdAt: Date;
    updatedAt: Date;
  }
  export interface Insertable {
    id?: number | DefaultType | SQLFragment;
    authorId: number | SQLFragment;
    title?: string | null | DefaultType | SQLFragment;
    createdAt?: Date | DefaultType | SQLFragment;
    updatedAt?: Date | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Selectable]?: Selectable[K] | SQLFragment };
  export interface UpsertReturnable extends Selectable, UpsertAction { };
  export type Column = keyof Selectable;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
  export interface OrderSpec {
    by: SQL,
    direction: 'ASC' | 'DESC',
    nulls?: 'FIRST' | 'LAST',
  }
  export interface SelectOptions {
    order?: OrderSpec[];
    limit?: number,
    offset?: number,
  }
}

export namespace email_authentication {
  export type Table = "email_authentication";
  export interface Selectable {
    email: string;
    consecutivefailedlogins: number;
    lastfailedlogin: Date | null;
  }
  export interface Insertable {
    email: string | SQLFragment;
    consecutivefailedlogins?: number | DefaultType | SQLFragment;
    lastfailedlogin?: Date | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Selectable]?: Selectable[K] | SQLFragment };
  export interface UpsertReturnable extends Selectable, UpsertAction { };
  export type Column = keyof Selectable;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
  export interface OrderSpec {
    by: SQL,
    direction: 'ASC' | 'DESC',
    nulls?: 'FIRST' | 'LAST',
  }
  export interface SelectOptions {
    order?: OrderSpec[];
    limit?: number,
    offset?: number,
  }
}

export type Selectable = appleTransactions.Selectable | authors.Selectable | books.Selectable | email_authentication.Selectable;
export type Whereable = appleTransactions.Whereable | authors.Whereable | books.Whereable | email_authentication.Whereable;
export type Insertable = appleTransactions.Insertable | authors.Insertable | books.Insertable | email_authentication.Insertable;
export type Updatable = appleTransactions.Updatable | authors.Updatable | books.Updatable | email_authentication.Updatable;
export type Table = appleTransactions.Table | authors.Table | books.Table | email_authentication.Table;
export type Column = appleTransactions.Column | authors.Column | books.Column | email_authentication.Column;
export type AllTables = [appleTransactions.Table, authors.Table, books.Table, email_authentication.Table];

export interface InsertSignatures {
  (client: Queryable, table: appleTransactions.Table, values: appleTransactions.Insertable): Promise<appleTransactions.Selectable>;
  (client: Queryable, table: appleTransactions.Table, values: appleTransactions.Insertable[]): Promise<appleTransactions.Selectable[]>;
  (client: Queryable, table: authors.Table, values: authors.Insertable): Promise<authors.Selectable>;
  (client: Queryable, table: authors.Table, values: authors.Insertable[]): Promise<authors.Selectable[]>;
  (client: Queryable, table: books.Table, values: books.Insertable): Promise<books.Selectable>;
  (client: Queryable, table: books.Table, values: books.Insertable[]): Promise<books.Selectable[]>;
  (client: Queryable, table: email_authentication.Table, values: email_authentication.Insertable): Promise<email_authentication.Selectable>;
  (client: Queryable, table: email_authentication.Table, values: email_authentication.Insertable[]): Promise<email_authentication.Selectable[]>;
}
export interface UpsertSignatures {
  (client: Queryable, table: appleTransactions.Table, values: appleTransactions.Insertable, uniqueCols: appleTransactions.Column | appleTransactions.Column[], noNullUpdateCols?: appleTransactions.Column | appleTransactions.Column[]): Promise<appleTransactions.UpsertReturnable>;
  (client: Queryable, table: appleTransactions.Table, values: appleTransactions.Insertable[], uniqueCols: appleTransactions.Column | appleTransactions.Column[], noNullUpdateCols?: appleTransactions.Column | appleTransactions.Column[]): Promise<appleTransactions.UpsertReturnable[]>;
  (client: Queryable, table: authors.Table, values: authors.Insertable, uniqueCols: authors.Column | authors.Column[], noNullUpdateCols?: authors.Column | authors.Column[]): Promise<authors.UpsertReturnable>;
  (client: Queryable, table: authors.Table, values: authors.Insertable[], uniqueCols: authors.Column | authors.Column[], noNullUpdateCols?: authors.Column | authors.Column[]): Promise<authors.UpsertReturnable[]>;
  (client: Queryable, table: books.Table, values: books.Insertable, uniqueCols: books.Column | books.Column[], noNullUpdateCols?: books.Column | books.Column[]): Promise<books.UpsertReturnable>;
  (client: Queryable, table: books.Table, values: books.Insertable[], uniqueCols: books.Column | books.Column[], noNullUpdateCols?: books.Column | books.Column[]): Promise<books.UpsertReturnable[]>;
  (client: Queryable, table: email_authentication.Table, values: email_authentication.Insertable, uniqueCols: email_authentication.Column | email_authentication.Column[], noNullUpdateCols?: email_authentication.Column | email_authentication.Column[]): Promise<email_authentication.UpsertReturnable>;
  (client: Queryable, table: email_authentication.Table, values: email_authentication.Insertable[], uniqueCols: email_authentication.Column | email_authentication.Column[], noNullUpdateCols?: email_authentication.Column | email_authentication.Column[]): Promise<email_authentication.UpsertReturnable[]>;
}
export interface UpdateSignatures {
  (client: Queryable, table: appleTransactions.Table, values: appleTransactions.Updatable, where: appleTransactions.Whereable): Promise<appleTransactions.Selectable[]>;
  (client: Queryable, table: authors.Table, values: authors.Updatable, where: authors.Whereable): Promise<authors.Selectable[]>;
  (client: Queryable, table: books.Table, values: books.Updatable, where: books.Whereable): Promise<books.Selectable[]>;
  (client: Queryable, table: email_authentication.Table, values: email_authentication.Updatable, where: email_authentication.Whereable): Promise<email_authentication.Selectable[]>;
}
export interface DeleteSignatures {
  (client: Queryable, table: appleTransactions.Table, where: appleTransactions.Whereable): Promise<appleTransactions.Selectable[]>;
  (client: Queryable, table: authors.Table, where: authors.Whereable): Promise<authors.Selectable[]>;
  (client: Queryable, table: books.Table, where: books.Whereable): Promise<books.Selectable[]>;
  (client: Queryable, table: email_authentication.Table, where: email_authentication.Whereable): Promise<email_authentication.Selectable[]>;
}
export interface SelectSignatures {
  (client: Queryable, table: appleTransactions.Table, where?: appleTransactions.Whereable, options?: appleTransactions.SelectOptions, count?: boolean): Promise<appleTransactions.Selectable[]>;
  (client: Queryable, table: authors.Table, where?: authors.Whereable, options?: authors.SelectOptions, count?: boolean): Promise<authors.Selectable[]>;
  (client: Queryable, table: books.Table, where?: books.Whereable, options?: books.SelectOptions, count?: boolean): Promise<books.Selectable[]>;
  (client: Queryable, table: email_authentication.Table, where?: email_authentication.Whereable, options?: email_authentication.SelectOptions, count?: boolean): Promise<email_authentication.Selectable[]>;
}
export interface SelectOneSignatures {
  (client: Queryable, table: appleTransactions.Table, where?: appleTransactions.Whereable, options?: appleTransactions.SelectOptions): Promise<appleTransactions.Selectable | undefined>;
  (client: Queryable, table: authors.Table, where?: authors.Whereable, options?: authors.SelectOptions): Promise<authors.Selectable | undefined>;
  (client: Queryable, table: books.Table, where?: books.Whereable, options?: books.SelectOptions): Promise<books.Selectable | undefined>;
  (client: Queryable, table: email_authentication.Table, where?: email_authentication.Whereable, options?: email_authentication.SelectOptions): Promise<email_authentication.Selectable | undefined>;
}
export interface CountSignatures {
  (client: Queryable, table: appleTransactions.Table, where?: appleTransactions.Whereable): Promise<number>;
  (client: Queryable, table: authors.Table, where?: authors.Whereable): Promise<number>;
  (client: Queryable, table: books.Table, where?: books.Whereable): Promise<number>;
  (client: Queryable, table: email_authentication.Table, where?: email_authentication.Whereable): Promise<number>;
}
